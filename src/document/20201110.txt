Advice : 공통의 관심사항 - 횡단 관심사항(공통 기능), 부가 기능을 구현.
	
	spring 제공 Advice : before
	    				after
	    				around
	    				afterReturning
	    				afterThrowing
	    		스프링 AOP에서는 스프링에서는 메서드 실행 전후로만 advice 등록이 가능하다
	    					  joinPoint가 메서드만 지원.
	pointCut : Advice 적용할 메소드를 식별 정의(정규 표현식).
	
	public List<String> 패키지.클래스.getUserPagingList(PageVo pageVo) throws Exception
	
	pointCut 표현법
				접근제어자 : 스프링에서는 public 메소드만 허용, 옵션(생략 가능)
				예외 :  생략 가능.
				반환타입 / 패키지         / 클래스 / 메소드명 (인자)
				*     kr.or.ddit..service.*.      *     (..)
				execution(* kr.or.ddit..service.*.*(..))
				ex)
				   kr.or.ddit.member.service
				   kr.or.ddit.board.service
				   kr.or.ddit.mail.service
			
				==> service 패키지에 있는 모든 클래스의 메소드가 실행될 때 --> pointCut
				, Profiling (메소드 실행 시간 측정)  
		    		
용어 정리: 				
target : 핵심 기능을 구현한 모듈. 핵심 관심 모듈, 어드바이스를 적용할 메서드

advice : 부가 기능을 구현한 모듈. 횡단 관심 모듈. 공통 기능

joinPoint : 어드바이스를 적용할 수 있는 모든 모듈, spring에서는 메서드만 지원.
            따라서 joinPoint == 모든 메서드라 생각해도 무방.

pointcut : joinpoint 중 정규식 조건을 만족하는 필터링된 joinpoint로 실질적으로 advice를 적용할 메서드.
		   어드바이스를 적용할 타겟의 메서드를 선별하는 정규표현식.

weaving : pointcut에 advice를 삽입하여 새로운 객체(proxy)를 생성.
		  위빙은 포인트컷에 의해서 결정된 타겟의 조인 포인트에 부가기능(어드바이스)를 삽입하는 과정을 뜻한다.
		  
		  

proxy :  weaving을 통해 새로 생성된 객체. 기존 객체가 호출되면 객체의 호출을 가로채 대신 호출되며 이때 추가된 advice를 실행하고
         핵심기능을 실행한다.

aspect : advice + pointcut. 
		oop의 기본 모듈이 객체이듯 aop의 기본 모듈. 싱글톤 형태의 객체로 존재.
advisor : advice + pointcut, spring aop에서만 쓰는 특별한 용어
