<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- 트랜잭션 적용 : service의 메소드에 적용 
		 1. 트랜잭션 매니저 등록 - DataSourceTransactionManager - spring 제공
		 	. dataSource에 대한 정보가 필요 
		 	 ** dataSource와 transactionManager의 선언 순서는 중요치 않음.
		 	 스프링 빈의 선언 순서는 중요하지 않음. spring container가 알아서 처리
		 2. advisor 등록 : element 이름은 : advice
		 3. aop 설정 : pointcut -->
	
	<!-- transactionManager 객체를 빈으로 등록  -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- ref에 해당하는 빈이 다른 파일에 선언되어 있어도 참조가능.  -->
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<!-- 트랙잭션 namespace (tx) 추가 후 transactionManager 빈을 advice로 등록. -->
	<tx:advice id="txAdvisor" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- tx:method name : 트랜잭션을 적용할 메소드의 이름, 패턴 적용 
				 				  select* : 메소드 이름이 select로 시작하는 모든 메소드
				 				  get* : 메소드 이름이 get으로 시작하는 모든 메소드
				 				  insert* : 메소드 이름이 insert로 시작하는 모든 메소드
				 				  *  : 모든 메소드
			-->
			<tx:method name="*" />
		</tx:attributes>	
	</tx:advice>
	
	<aop:config>
		<!-- execution(실행할 때), within(특정패키지에 담겨있는 클래스를 찾을 때)
		     bean(스프링 빈을 찾을 때)  
		     service 패키지에 있는 모든 클래스에 대하여-->
		<aop:advisor advice-ref="txAdvisor" pointcut="within(kr.or.ddit..service.*)" />
	
	</aop:config>
	
</beans>
